name: 'Prepare release'
description: 'Update manifests, changelog before the release'
inputs:
  semantic_release_tag_format:
    required: false
    description: |
      The semantic-release tag format, like "v${version}" or "someapp-${version}
  semantic_release_working_directory:
    required: false
    description: |
      The semantic-release working directory
  semantic_release_monorepo:
    default: "false"
    description: |
      Install the semantic-release semantic-release-monorepo plugin
      Most likely you would want to set the "semantic_release_working_directory"
  commit_back:
    default: "false"
    description: "Commit and push version updates"
  add_git_notes:
    default: "false"
    description: "Add and push \"semantic-release\" git notes to determine release channel. Should be `true` if release is going to be done"
  changelog_update:
    default: "false"
    description: "Update changelog"
  changelog_path:
    default: "CHANGELOG.md"
    description: "Changelog file path"
  bump_version_yaml:
    default: "false"
    description: "Bump version in arbitrary YAML file"
  bump_version_yaml_path:
    description: |
      Path to the YAML where version should be bumped
      Required if `bump_version_yaml`
  bump_version_yaml_key:
    description: |
      Version key in the YAML file, in the [yq](https://mikefarah.gitbook.io/yq) format.
      Coma-separated list of keys are supported (no spaces)
      Required if `bump_version_yaml`
  # Sensitive inputs
  github_token:
    required: true
    description: "GitHub token to use"
  github_token_push:
    required: false
    description: "GitHub token to use pushing changes back, `github_token` if unset"
outputs:
  new_release_published:
    description: "New released published or to be published"
    value: ${{ steps.semantic_release.outputs.new_release_published }}
  new_release_version:
    description: "New release version"
    value: ${{ steps.semantic_release.outputs.new_release_version }}
  new_release_major_version:
    description: "New release major version"
    value: ${{ steps.semantic_release.outputs.new_release_major_version }}
  new_release_minor_version:
    description: "New release minor version"
    value: ${{ steps.semantic_release.outputs.new_release_minor_version }}
  new_release_patch_version:
    description: "New release patch version"
    value: ${{ steps.semantic_release.outputs.new_release_patch_version }}
  new_release_notes:
    description: "New release changelog"
    value: ${{ steps.semantic_release.outputs.new_release_notes }}
  new_release_channel:
    description: "New release channel"
    value: ${{ steps.semantic_release.outputs.new_release_channel }}
  last_release_version:
    description: "Last release version"
    value: ${{ steps.semantic_release.outputs.last_release_version }}
  last_release_git_tag:
    description: "Last release tag"
    value: ${{ steps.semantic_release.outputs.last_release_git_tag }}

runs:
  using: "composite"
  steps:
    - name: Install semantic-release-monorepo
      if: ${{ fromJson(inputs.semantic_release_monorepo) }}
      shell: bash
      run: |
        npm install -D semantic-release-monorepo@8.0.2 conventional-changelog-conventionalcommits
      working-directory: ${{ inputs.semantic_release_working_directory }}
    - name: Semantic Release
      id: semantic_release
      uses: cycjimmy/semantic-release-action@9cc899c47e6841430bbaedb43de1560a568dfd16 # v5.0.0
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_format: ${{ inputs.semantic_release_tag_format }}
        working_directory: ${{ inputs.semantic_release_working_directory }}
        ci: false
        dry_run: true
        unset_gha_env: true
        extra_plugins: |
          conventional-changelog-conventionalcommits
    - name: Bump version in YAML
      if: ${{ fromJson(steps.semantic_release.outputs.new_release_published) && fromJson(inputs.bump_version_yaml) }}
      shell: bash
      run: |
        echo 'Bump version in YAML'
        sh ${{ github.action_path }}/bump_yaml.sh \
          ${{ inputs.bump_version_yaml_path }} \
          ${{ inputs.bump_version_yaml_key }} \
          ${{ steps.semantic_release.outputs.new_release_version }}
    - name: Update the changelog
      if: ${{ fromJson(steps.semantic_release.outputs.new_release_published) && fromJson(inputs.changelog_update) }}
      shell: bash
      run: |
        echo 'Update the changelog'
        if [ ! -f '${{ inputs.changelog_path }}' ]; then touch '${{ inputs.changelog_path }}'; fi

        cat > /tmp/chlog <<- EOF
        ${{ steps.semantic_release.outputs.new_release_notes }}

        $(cat ${{ inputs.changelog_path }})
        EOF
        mv /tmp/chlog ${{ inputs.changelog_path }}
    - name: Commit back
      if: ${{ fromJson(steps.semantic_release.outputs.new_release_published) && fromJson(inputs.commit_back) }}
      uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0 # v6.0.1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token_push || inputs.github_token }}
      with:
        commit_message: |
          doc: Update version/changelog
    # Git notes are needed for "semantic-release" to properly detect release channel
    - name: Add git notes
      if: ${{ fromJson(steps.semantic_release.outputs.new_release_published) && fromJson(inputs.add_git_notes)}}
      shell: bash
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git notes --ref semantic-release add -f -m '{"channels":["${{ steps.semantic_release.outputs.new_release_channel }}"]}'
        git push origin refs/notes/semantic-release
    - name: Cleanup semantic-release-monorepo
      if: ${{ fromJson(inputs.semantic_release_monorepo) }}
      shell: bash
      run: |
        rm -rf package-lock.json package.json node_modules
      working-directory: ${{ inputs.semantic_release_working_directory }}
