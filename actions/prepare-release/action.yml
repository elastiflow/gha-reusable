name: 'Prepare release'
description: 'Update manifests, changelog before the release'
inputs:
  pre_release:
    default: "false"
    description: Should a pre-release happen (${version}-alpha.1, ${version}-alpha.2, ...) instead of normal release
  tag_prefix:
    default: "v"
    description: Tag prefix to parse/create
  git_cliff_version:
    default: "2.10.1"
    description: "git-cliff version"
  include_paths:
    default: '**/*'
    description: |
      Include paths to determine related commits, coma-separated list
      Used as the --include-path values for `git-cliff` (globs supported), for example:
      include_path: 'charts/chart-one/**/*,charts/chart-two/**/*'
  exclude_paths:
    default: ''
    description: |
      Exclude paths to determine related commits, coma-separated list
      Used as the --exclude-path values for `git-cliff` (globs supported), for example:
      exclude_path: 'charts/chart-one/**/*,charts/chart-two/**/*'
  add_git_notes:
    default: "false"
    description: "Add and push \"semantic-release\" git notes to determine release channel. Should be `true` if release is going to be done"
  changelog_update:
    default: "false"
    description: "Update changelog"
  changelog_path:
    default: "CHANGELOG.md"
    description: "Changelog file path"
  bump_version_yaml:
    default: "false"
    description: "Bump version in arbitrary YAML file"
  bump_version_yaml_path:
    description: |
      Path to the YAML where version should be bumped
      Required if `bump_version_yaml`
  bump_version_yaml_key:
    description: |
      Version key in the YAML file, in the [yq](https://mikefarah.gitbook.io/yq) format.
      Coma-separated list of keys are supported (no spaces)
      Required if `bump_version_yaml`
outputs:
  new_release_published:
    description: "New released published or to be published"
    value: ${{ steps.semantic_release.outputs.new_release_published }}
  new_release_version:
    description: "New release version"
    value: ${{ steps.semantic_release.outputs.new_release_version }}
  new_release_git_tag:
    description: "New release git tag"
    value: ${{ steps.semantic_release.outputs.new_release_version }}
  new_release_notes:
    description: "New release changelog"
    value: ${{ steps.semantic_release.outputs.new_release_notes }}
  last_release_version:
    description: "Last release version"
    value: ${{ steps.semantic_release.outputs.last_release_version }}
  last_release_git_tag:
    description: "Last release tag"
    value: ${{ steps.semantic_release.outputs.last_release_git_tag }}


runs:
  using: "composite"
  steps:
    - name: Install git-cliff
      shell: bash
      run: |
        wget -c -O - https://github.com/orhun/git-cliff/releases/download/v${{ inputs.git_cliff_version }}/git-cliff-${{ inputs.git_cliff_version }}-x86_64-unknown-linux-gnu.tar.gz \
          | tar xfvpz - --directory /usr/local/bin --strip-components=1 git-cliff-${{ inputs.git_cliff_version }}/git-cliff
    - name: Semantic Release attributes (git-cliff)
      id: semantic_release
      shell: bash
      run: |
        bash .github/actions/prepare-release/git_cliff.sh \
          -c '${{ github.action_path }}/cliff.toml' \
          -t '${{ inputs.tag_prefix }}' \
          -i '${{ inputs.include_paths }}' \
          -e '${{ inputs.exclude_paths }}'
    - name: Bump version in YAML
      if: ${{ fromJson(steps.semantic_release.outputs.new_release_published) && fromJson(inputs.bump_version_yaml) }}
      shell: bash
      run: |
        echo 'Bump version in YAML'
        sh ${{ github.action_path }}/bump_yaml.sh \
          ${{ inputs.bump_version_yaml_path }} \
          ${{ inputs.bump_version_yaml_key }} \
          ${{ steps.semantic_release.outputs.new_release_version }}
    - name: Update the changelog
      if: ${{ fromJson(steps.semantic_release.outputs.new_release_published) && fromJson(inputs.changelog_update) }}
      shell: bash
      run: |
        echo 'Update the changelog'
        if [ ! -f '${{ inputs.changelog_path }}' ]; then touch '${{ inputs.changelog_path }}'; fi

        cat > /tmp/chlog <<- EOF
        ${{ steps.semantic_release.outputs.new_release_notes }}

        $(cat ${{ inputs.changelog_path }})
        EOF
        mv /tmp/chlog ${{ inputs.changelog_path }}
