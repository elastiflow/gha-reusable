name: 'Docker build/push'
description: 'Docker build/push'
inputs:
  registry:
    default: not-exists.elastiflow.com
    description: Docker registry to
  image:
    default: foobar
    description: Docker image to build/push
  tag:
    default: "oldest"
    description: Docker image tag to build/push
  dockerfile:
    default: Dockerfile
    description: Dockerfile to be used for building the packages.
  platforms:
    default: linux/amd64
    description: Docker platforms to build, coma-separated list, https://docs.docker.com/build/ci/github-actions/multi-platform/
  target:
    description: Docker target to produce final artifacts
  build_args:
    description: |
      Docker build args, example:

        build_args: |
          "SOME_DEP_VERSION=awesome-dependency:v1.1.1"
          "SOME_DEP_VERSION=awesome-dependency"
  context:
    default: "."
    description: "Docker context"
  load:
    default: "false"
    description: "Load the image to the local docker, https://docs.docker.com/reference/cli/docker/buildx/build/#docker"
  push:
    default: "false"
    description: "Push the image to registry or not, useful for cache-only builds"
  cache_from:
    description: "Use docker cache from GHA Cache, https://docs.docker.com/reference/cli/docker/buildx/build/#cache-from"
  cache_to:
    description: "Upload docker cache to GHA Cache, https://docs.docker.com/reference/cli/docker/buildx/build/#cache-to"
  # Sensitive values
  registry_username:
    description: "Docker registry username to authenticate with, uses https://github.com/docker/login-action?tab=readme-ov-file#about"
  registry_password:
    description: "Docker registry password (token) to authenticate with, uses https://github.com/docker/login-action?tab=readme-ov-file#about"

runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to the Container registry
      if: ${{ fromJson(inputs.push) }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      if: ${{ fromJson(inputs.push) }}
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image }}
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6
      with:
        file: ${{ inputs.dockerfile }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ inputs.registry }}/${{ inputs.image }}:${{ inputs.tag }}
        build-args: |
            ${{ inputs.build_args }}
        target: ${{ inputs.target }}
        context: ${{ inputs.context }}
        cache-from: ${{ inputs.cache_from }}
        cache-to: ${{ inputs.cache_to }}
        load: ${{ fromJson(inputs.load) }}
        push: ${{ fromJson(inputs.push) }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v3
      if: ${{ fromJson(inputs.push) }}
      with:
        subject-name: ${{ inputs.registry }}/${{ inputs.image}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
